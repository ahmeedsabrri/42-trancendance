FROM node:latest AS base

# -----------------------------------------------------------
# Stage 1: Install dependencies
# -----------------------------------------------------------
FROM base AS deps
# Ensure you only use a single RUN instruction
RUN apt-get update && apt-get install -y libc6

WORKDIR /frontend

# Copy package management files and install dependencies
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# -----------------------------------------------------------
# Stage 2: Development environment setup
# -----------------------------------------------------------
FROM base AS dev
WORKDIR /frontend
COPY --from=deps /frontend/node_modules ./node_modules
COPY . .

# Set development environment variable
ENV NODE_ENV development

# Start the development server
CMD ["npm", "run", "dev"]

# -----------------------------------------------------------
# Stage 3: Build the application for production
# -----------------------------------------------------------
FROM base AS builder
WORKDIR /frontend
COPY --from=deps /frontend/node_modules ./node_modules
COPY . .

# Disable telemetry during the build process
ENV NEXT_TELEMETRY_DISABLED 1

# Build the project
RUN npm run build

# -----------------------------------------------------------
# Stage 4: Production-ready image
# -----------------------------------------------------------
FROM node:alpine AS runner
WORKDIR /frontend

# Create a non-root user for better security
RUN addgroup -S nodejs && adduser -S nextjs -G nodejs

# Copy public assets and build output from builder stage
COPY --from=builder /frontend/public ./public
COPY --from=builder /frontend/.next ./frontend/.next

# Ensure correct ownership of files
RUN chown -R nextjs:nodejs /frontend

# Switch to non-root user
USER nextjs

# Expose the necessary port for Next.js
EXPOSE 3000

# Start the production server
CMD ["node", "frontend/.next/standalone/server.js"]
# FROM node:18-alpine AS base

# # Install dependencies only when needed
# FROM base AS deps
# # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
# RUN apk add --no-cache libc6-compat
# WORKDIR /frontend

# # Install dependencies based on the preferred package manager
# COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
# RUN \
#   if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
#   elif [ -f package-lock.json ]; then npm ci; \
#   elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
#   else echo "Lockfile not found." && exit 1; \
#   fi

# FROM base AS dev

# WORKDIR /frontend
# COPY --from=deps /frontend/node_modules ./node_modules
# COPY . .



# # Rebuild the source code only when needed
# FROM base AS builder
# WORKDIR /frontend
# COPY --from=deps /frontend/node_modules ./node_modules
# COPY . .

# # Next.js collects completely anonymous telemetry data about general usage.
# # Learn more here: https://nextjs.org/telemetry
# # Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

# # RUN yarn build

# # Set development environment variable
# ENV NODE_ENV development
# # If using npm comment out above and use below instead
# RUN npm run dev

# # Production image, copy all the files and run next
# FROM base AS runner
# WORKDIR /frontend

# # Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs

# COPY --from=builder /frontend/public ./public

# # Automatically leverage output traces to reduce image size
# # https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# USER nextjs


# CMD ["node", "server.js"]